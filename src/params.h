// Publius - Didactic public domain bitboard chess engine 
// by Pawel Koziol

// - Parameters class holds piece/square tables
//   (as well as a few other values)
//   and has a rudimentary Texel tuner
// - later we have initializers for all these values
// - for S macro see score.h

#pragma once

class Parameters {
public:
    void Init();
    int pawnSupport[2][64];
    int pst[2][6][64];
    void PrintPst(int piece);
    void PrintAll();
    void TunePst();
};

extern Parameters Params;

// Game phase is used to interpolate between middlegame
// and endgame scores. See Interpolate() for details.
const int phaseTable[6] = { 0,   1,   1,   2,   4,  0 };
const int MaxGamePhase = 24;

const int pieceValue[6] = {
    S(93, 104), S(402, 345), S(407, 375), S(589, 645), S(1250, 1240), S(0, 0) 
};

const int pressureBonus[7] = { 
    S(1, 2), S(10, 14), S(10, 14), S(12, 17), S(20,24), 0, 0 
};

const int passedBonus[2][8] = {
    { S(0, 11), S(10, 11), S(10, 11), S(30, 37), S(50, 62), S(80, 107), S(120, 165), S(0, 0) },
    { S(0, 165), S(120, 165), S(80, 107), S(50, 62), S(30, 37), S(10, 11), S(10, 11), S(0, 0) }
};

const int knightMob[9] = { 
    S(-28, -28), S(-6, -8), S(-3,-10), S(-2,6), S(16,0), S(17,5), S(17, 8), S(20, 9), S(25, 8)
};

const int bishMob[15] = {
    S(-30, -30), S(-29, -37), S(-23, -38), S(-11, -21), S(-5, -20),
    S(2,   -8),  S(8,    6),  S(12,  12),  S(20,  14),  S(19,  15),
    S(23,  25),  S(28,  18),  S(35,  24),  S(44,  20),  S(40,  25)
}; 

const int rookMob[15] = {
    S(-14, -28), S(-12, -24), S(-13, -25), S(-11, -19), S(-8, -11),
    S(-6,  -4),  S(-8,   3),  S(-3,  10),  S(2,  10),  S(2, 16),
    S(7,  18),  S(14,  21),  S(17,  28),  S(17,  34),  S(10, 37)
};

const int queenMob[28] = {
    S(-14, -28), S(-13, -26), S(-12, -24), S(-30, -30), S(-28, -43),
    S(-17, -26), S(-11, -23), S(-2,  -28), S(-6,  -34), S(  0, -21),
    S(  3, -24), S(  1, -22), S(  1,  -7), S(  1,  -2), S(  4,  -9),
    S(  6,  -1), S(  5,   3), S(  0,  19), S(  3,  25), S(  2,  19),
    S(  7,  20), S(  3,  31), S(  6,  26), S(  2,  29), S( 15,  21),
    S( 21,  13), S( 12,  17), S( 14,  22)
};

const int tempo = S(5, 10);
const int bishPair = S(40, 60);
const int doubledPawn = S(-9,-9);
const int isolPawn = S(-10, -18);
const int isolOpen = S(-9, 0);
const int backwardPawn = S(-2, -1);
const int backwardOpen = S(-6, 0);
const int rookHalf = S(12, 12);
const int rookOpen = S(18, 18);
const int rook7th =  S(12, 30);
const int kingPseudoShield = S(8, 0);
const int kingOpenFilePenalty = S(-8, 0);
const int kingNearOpenPenalty = S(-6, 0);
const int minorOnMinor = S(15, 15);
const int trappedRook = S(-25, -25);

const int p_support[64] = {
  0,   0,   0,   0,   0,   0,   0,   0,
  3,   3,   1,  -1,   2,   5,   6,   4,
  3,   0,   2,   3,   4,   2,   4,   6,
  1,   1,   6,  17,  10,   5,   1,   1,
  3,   4,   8,  14,  15,   9,   4,   3,
  7,   9,  10,  12,  12,  10,   9,   7,
  9,  10,  12,  14,  14,  12,  10,   9,
  0,   0,   0,   0,   0,   0,   0,   0,
};

const int pawnPst[64] = {
  S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  1,  0), S(  0,  0),
  S(-10, -3), S(-14, -4), S(-14, 10), S(-18, 12), S(-13, 12), S( 10, 10), S( 10, -4), S(-20, -3),
  S(-13, -3), S(-14,  0), S(-13, -1), S( -8,  0), S( -4,  0), S( -1, -1), S(  4,  0), S(-15, -3),
  S(-11,  2), S( -8,  2), S( -5, -5), S(  3,-14), S( 10,-14), S(  2, -5), S( -8,  2), S(-16,  2),
  S(  2, 19), S(  7, 11), S(  7,  2), S( 11,-13), S( 26,-13), S( 20,  2), S( 10, 11), S( -7, 19),
  S( 13, 46), S( 17, 40), S( 23, 22), S( 16,  5), S( 24,  5), S( 45, 22), S( 25, 40), S( -2, 46),
  S( 32, 52), S( 34, 63), S( 35, 43), S( 25, 32), S( 23, 32), S( 29, 43), S(  2, 63), S(  4, 52),
  S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0), S(  0,  0)
};
const int knightPst[64] = {
  S(-42,-42), S(-15,-39), S(-33,-10), S( -9,-10), S(-10,-10), S( -7,-10), S(-16,-39), S(-40,-42),
  S(-33,-13), S(-27,  3), S(-14,  4), S( -2,  7), S( -1,  7), S( -4,  4), S(-12,  3), S( -9,-13),
  S(-25,-18), S( -5,  9), S(  7, 15), S( 13, 34), S( 22, 34), S( 12, 15), S( 11,  9), S( -7,-18),
  S(-14,  9), S( -1, 26), S( 20, 40), S( 20, 43), S( 31, 43), S( 19, 40), S( 16, 26), S( -4,  9),
  S(-15, 19), S(  8, 34), S( 23, 39), S( 32, 49), S( 26, 49), S( 39, 39), S( 18, 34), S( 22, 19),
  S(-11,  3), S( -2, 24), S( 13, 31), S( 33, 27), S( 35, 27), S( 62, 31), S( 30, 24), S(  3,  3),
  S(-23,-10), S(-19,  2), S( 40,  3), S( 28, 27), S( 33, 27), S( 41,  3), S( -7,  2), S(  0,-10),
  S(-141,-70), S(-25,-23), S( -6, -4), S(-16,  6), S(  8,  6), S( -6, -4), S(-38,-23), S(-130,-70)
};
const int bishopPst[64] = {
  S( -3,-15), S( -1, -1), S(-14,-14), S(-16, -7), S(-17, -7), S(-11,-14), S(-28, -1), S( -5,-15),
  S(  3,-19), S(  1,-15), S(  6, -7), S( -9, -2), S( -2, -2), S(  6, -7), S( 23,-15), S(  6,-19),
  S( -4, -2), S(  1,  7), S(  3,  6), S(  2, 14), S(  4, 14), S(  7,  6), S(  2,  7), S( 11, -2),
  S(-21, -1), S(  2, 10), S(  5, 18), S( 13, 14), S( 13, 14), S(  4, 18), S(  3, 10), S( -5, -1),
  S(-22, 10), S(  3, 27), S(  2, 18), S( 29, 16), S( 14, 16), S(  2, 18), S(  5, 27), S(-17, 10),
  S(-14, 15), S(  7, 20), S( 22,  9), S(  9,  5), S( 25,  5), S( 35,  9), S( -1, 20), S( 15, 15),
  S(-26,  0), S(-10, 10), S(-11, 12), S(-10, 12), S( -7, 12), S( 15, 12), S( -1, 10), S(  2,  0),
  S(-30, -2), S(-29,  6), S( -6, -4), S(-25,  6), S(-23,  6), S( -2, -4), S(  1,  6), S(-19, -2)
};
const int rookPst[64] = {
  S( -5,-27), S( -4,-14), S(  5,-18), S( 10,-21), S( 12,-21), S(  7,-18), S( -1,-14), S( -7,-27),
  S(-30,-22), S(-16,-15), S(-10,-15), S( -8,-21), S(-11,-21), S(-11,-15), S(  4,-15), S(-22,-22),
  S(-26,-13), S(-14,-10), S(-16,-15), S( -9,-16), S( -7,-16), S( -3,-15), S(  5,-10), S(-14,-13),
  S(-17, -1), S(-12, -7), S(-10, -1), S( -7, -1), S(-12, -1), S(-14, -1), S(  7, -7), S( -8, -1),
  S(-14,  6), S(  0,  7), S(  0, 11), S(  6,  7), S(  5,  7), S( 15, 11), S( 10,  7), S( -1,  6),
  S(  5,  5), S( 22,  4), S(  0, 16), S( 16,  8), S( 12,  8), S( 18, 16), S( 24,  4), S( 19,  5),
  S(-12, -5), S( -9,  0), S( 13, -2), S(  9, -1), S( 12, -1), S( 19, -2), S(  1,  0), S(  4, -5),
  S( 16, 18), S(  8, 22), S( -6, 33), S( 11, 24), S( 14, 24), S(  5, 33), S( 18, 22), S( 26, 18)
};
const int queenPst[64] = {
  S(  8,-49), S(-11,-38), S( -4,-51), S(  5,-34), S(  4,-34), S( -9,-51), S(-23,-38), S(-10,-49),
  S(-12,-31), S(  0,-26), S(  9,-49), S( 10,-26), S(  4,-26), S( 12,-49), S(  3,-26), S(-15,-31),
  S(-24,-11), S( -3,-10), S(  0, -2), S( -2,-14), S(  2,-14), S(  4, -2), S( 13,-10), S( -4,-11),
  S(-10,-12), S(-13, 18), S( -7,  6), S( -5, 24), S(  2, 24), S(  5,  6), S(  8, 18), S(  9,-12),
  S(-26,  6), S(-16, 15), S(-10, -2), S(-14, 40), S( -2, 40), S( -3, -2), S(  9, 15), S(  1,  6),
  S(-21,-10), S(-14, -5), S(-11,  9), S(-15, 11), S( 15, 11), S( 19,  9), S( 29, -5), S( 13,-10),
  S(-34,  6), S(-33, -7), S(-17, 15), S(  0, -3), S( -4, -3), S( 17, 15), S( -5, -7), S( 31,  6),
  S(-31, -9), S(-20, -2), S( -3, 10), S(  6,  2), S(  1,  2), S( 14, 10), S( 18, -2), S( 17, -9)
};
const int kingPst[64] = {
  S(  9,-62), S( 40,-22), S( 20,-10), S(-34,-27), S(-14,-27), S(-26,-10), S( 26,-22), S( 22,-62),
  S(  5,-12), S(  0,  4), S(-15, 23), S(-46, 25), S(-33, 25), S(-25, 23), S( 14,  4), S( 12,-12),
  S(-22,-15), S(  9,  7), S( -2, 22), S(-17, 34), S(-20, 34), S( -7, 22), S(  7,  7), S(-15,-15),
  S(-12,-13), S( 21, 16), S( 10, 33), S(-11, 48), S(  1, 48), S(  1, 33), S(  6, 16), S(-18,-13),
  S(  5,  4), S(  0, 34), S( 15, 41), S( 18, 43), S( 16, 43), S( 11, 41), S( -7, 34), S(-21,  4),
  S(  3,  9), S( 26, 39), S( 25, 48), S( 14, 34), S( 18, 34), S( 20, 48), S( 22, 39), S(-25,  9),
  S(  2,-33), S( 10, 33), S( 15, 21), S(  5, 19), S( 12, 19), S( 24, 21), S(  5, 33), S( -2,-33),
  S(-31,-84), S(-10,-26), S( -2,-19), S( -2,-27), S(  4,-27), S( -2,-19), S(-24,-26), S(-14,-84)
};